# 调用ias 得到图片json
import requests
from iou import compute_iou2
import os
import time
from get_all_xml_nums import get_total_xml, get_xml_res, get_pic_res
from config import Config
from collections import defaultdict
import base64,shutil
import unittest
from function import *




class BaseAlgorithm(object):
    """业务相关的基类"""


    def __init__(self,*args, **kwargs):
        # 获取或有的xml种类的数目
        self.xml_total_kinds = get_total_xml(Config.path, Config.xml_kinds,"object")
        self.xml_total = sum(self.xml_total_kinds.values())
        # 创建一个defaultdict字典对象 通过字典方式统计不确定的结果
        self.res_name = {"TP":0, "FP":0,"FN":0, "TN":0}
        self.total_num = 0
        self.alert = defaultdict(int)

    def __del__(self,*args, **kwargs):
        print("当前图片总数{}".format(self.total_num))
        print("当前识别图片情况{}".format(dict(self.res_name)))


    def get_alert_flag(self,return_result,key_list):
        """获取报警标志"""
        alert_flag=get_json_data(return_result,key_list)
        print("alert_flag:",alert_flag)
        if alert_flag == 0 or alert_flag == "false":
            self.alert["alert_true"]=0
            print(self.alert)
        elif alert_flag == 1 or alert_flag == "True":
            self.alert["alert_true"]=1

    def alert_compared(self,alert_flag,label_list,xml_key_list):
        """报警标志与xml文件比较,并统计TP,FP,FN,TN"""
        #label_list:需要验证的标签，xml_key_list：xml中的标签
        if alert_flag["alert_true"] :
                flag = False
                for label in label_list:
                    if label in xml_key_list:
                        flag = True
                        break
                if flag:
                    self.res_name["TP"] += 1#值加1
                else:
                    self.res_name["FP"] += 1#值加1
        else:
            flag = False
            for label in label_list:
                if label in xml_key_list:
                    flag = True
                    break
            if flag:
                self.res_name["FN"] += 1#值加1
            else:
                self.res_name["TN"] += 1#值加1
        print(self.res_name)
        try:
            precision =  self.res_name["TP"]/(self.res_name["TP"]+self.res_name["FP"])
            recall = self.res_name["TP"]/(self.res_name["TP"]+self.res_name["FN"])
            print("precision：{}%\nrecall：{}%：".format(precision*100,recall*100))
        except Exception as e:
            print(e)

    def get_http_ias(self,pic, pic_with_dir):
        """封装调用http接口"""
        data = {
            'image': (pic, open(pic_with_dir, 'rb'))
        }
        try:
            res_image = requests.post(Config.url, files=data)
            # print(res_image.json())
            # over_write_result(Config.res_file,pic_with_dir, res_image.json())#将返回结果写到文件
            global img_code
            img_code=get_json_data(res_image,["buffer"])
            decode_base64(img_code,Config.img_path,img_name)
            self.get_alert_flag(res_image,Config.alert_flag)
            if res_image.json().get("code") == -1:
                print("------------------算法未授权, 退出-----------------")
                exit(1)
        except Exception as e:
            print("报错的图片{}".format(pic))
            shutil.copyfile("{}{}".format(Config.path,pic),"{}{}".format(Config.error_img_path,pic))#保存报错图片
            shutil.copyfile("{}{}".format(Config.path,pic.replace("jpg","xml")),"{}{}".format(Config.error_img_path,pic.replace("jpg","xml")))#保存报错图片对应xml
            time.sleep(5)
            return None
        else:
            res_index = get_json_data(res_image,Config.res_json_key)
            print("res_index:",res_index)
            return res_index

    def xml_pic_judge_res(self,path):
        """提交图片到算法分析 返回获取到的json结果"""
        self.total_num=len(get_pictures_list(path))
        for pic_file in get_pictures_list(path):
            # 根据图片名称, 生成带路径的图片 和带路径对应的xml
            pic_with_dir = os.path.join(path + pic_file)
            print("pic_with_dir:{}".format(pic_with_dir))
            xml = pic_file.split('.')[0] + ".xml"
            global img_name
            img_name=pic_file.split('.')[0]
            print("img_name:",img_name)
            xml_with_dir = os.path.join(path + xml)

            # 调用get_http_ias接口 获取
            res_index = self.get_http_ias(pic_file, pic_with_dir)
            print('get_http_ias返回:{}'.format(res_index))
            # 调用写入结果到txt接口
            over_write_result(Config.res_over_write,pic_with_dir, res_index)
            xml_persons = get_xml_res(xml_with_dir,'object')
            xml_key = []
            for xml_list in xml_persons:
                xml_key.append(list(xml_list.keys())[0])
            print("xml_key:",xml_key)
            print("xml_persons:{}".format(xml_persons))
            self.alert_compared(self.alert,Config.label_list,xml_key)



class AutoTest(BaseAlgorithm,unittest.TestCase):
    """自动化测试"""

    # def __init__(self,*args, **kwargs):
    #     super().__init__(*args, **kwargs)
    def setUp(self,*args, **kwargs):
        super().__init__(*args, **kwargs)

    def tearDown(self,*args, **kwargs):
        super().__del__(*args, **kwargs)
    # def __del__(self,*args, **kwargs):
    #     super().__del__(*args, **kwargs)

    def test_seeper_alert(self):
        """积水报警测试"""
        self.xml_pic_judge_res(Config.path)

if __name__ == '__main__':
    # unittest.main()
    test=BaseAlgorithm()
    test.xml_pic_judge_res(Config.path)